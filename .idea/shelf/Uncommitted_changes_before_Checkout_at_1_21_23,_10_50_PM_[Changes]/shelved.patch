Index: app/src/main/java/com/ethanmichaelis/clicky/nav/AuthDialog.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.ethanmichaelis.clicky.nav\n\nimport android.util.Patterns\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.foundation.text.KeyboardActions\nimport androidx.compose.foundation.text.KeyboardOptions\nimport androidx.compose.material.*\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Close\nimport androidx.compose.material.icons.filled.Visibility\nimport androidx.compose.material.icons.filled.VisibilityOff\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.saveable.rememberSaveable\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.text.input.ImeAction\nimport androidx.compose.ui.text.input.KeyboardType\nimport androidx.compose.ui.text.input.PasswordVisualTransformation\nimport androidx.compose.ui.text.input.VisualTransformation\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport com.ethanmichaelis.clicky.nav.AuthType.LOGIN\nimport com.ethanmichaelis.clicky.nav.AuthType.REGISTER\nimport com.ethanmichaelis.clicky.nav.ValidationType.*\nimport com.ethanmichaelis.clicky.ui.theme.ClickyTheme\n\nenum class AuthType { LOGIN, REGISTER, ; }\n\n@Composable\nfun AuthDialog(\n    type: AuthType = LOGIN,\n    loading: Boolean = false,\n    submit: (String, String) -> Unit = { _, _ -> },\n    onBackPressed: () -> Unit = {},\n) {\n    var validation by rememberSaveable { mutableStateOf(SUCCESS) }\n    Column(\n        modifier = Modifier\n            .fillMaxWidth()\n            .background(\n                color = MaterialTheme.colors.background,\n                shape = RoundedCornerShape(4.dp)\n            ),\n        horizontalAlignment = Alignment.CenterHorizontally,\n    ) {\n        var email by rememberSaveable { mutableStateOf(\"\") }\n        var password by rememberSaveable { mutableStateOf(\"\") }\n        var passwordConfirmation by rememberSaveable { mutableStateOf(\"\") }\n        var showPassword by rememberSaveable { mutableStateOf(false) }\n        Row(modifier = Modifier.fillMaxWidth()) {\n            IconButton(\n                onClick = { if (!loading) onBackPressed() }\n            ) {\n                Icon(imageVector = Icons.Filled.Close, contentDescription = \"Exit X\")\n            }\n        }\n        Column(\n            modifier = Modifier\n                .padding(16.dp),\n            verticalArrangement = Arrangement.spacedBy(16.dp),\n        ) {\n            TextField(\n                modifier = Modifier.fillMaxWidth(),\n                label = { Text(text = \"Email\") },\n                placeholder = { Text(text = \"Email\") },\n                value = email,\n                onValueChange = {\n                    email = it\n                },\n                isError = validation == INVALID_EMAIL,\n                enabled = !loading,\n                singleLine = true,\n                keyboardOptions = KeyboardOptions(\n                    keyboardType = KeyboardType.Email,\n                    imeAction = ImeAction.Next,\n                ),\n            )\n            PasswordField(\n                text = password,\n                showPassword = showPassword,\n                onTextChanged = { password = it },\n                onShowPassword = { showPassword = it },\n                isError = validation == INVALID_PASSWORD || validation == MISMATCHED_PASSWORDS,\n                enabled = !loading,\n            )\n            if (type == REGISTER) {\n                PasswordField(\n                    text = passwordConfirmation,\n                    isConfirmation = true,\n                    showPassword = showPassword,\n                    onTextChanged = { passwordConfirmation = it },\n                    onShowPassword = { showPassword = it },\n                    isError = validation == INVALID_PASSWORD || validation == MISMATCHED_PASSWORDS,\n                    enabled = !loading,\n                )\n            }\n            Button(\n                modifier = Modifier\n                    .fillMaxWidth(),\n                onClick = {\n                    validation = validateEmailAndPassword(\n                        type = type,\n                        email = email,\n                        password = password,\n                        passwordConfirmation = passwordConfirmation,\n                    )\n                    if (validation == SUCCESS) submit(email, password)\n                },\n                enabled = !loading,\n            ) {\n                if (loading) {\n                    CircularProgressIndicator(color = Color.Gray)\n                } else {\n                    Text(text = \"Submit\")\n                }\n            }\n        }\n    }\n}\n\nprivate enum class ValidationType {\n    SUCCESS, INVALID_EMAIL, INVALID_PASSWORD, MISMATCHED_PASSWORDS, ;\n}\nprivate fun validateEmailAndPassword(\n    type: AuthType,\n    email: String,\n    password: String,\n    passwordConfirmation: String,\n): ValidationType {\n    if (email.isBlank() || !Patterns.EMAIL_ADDRESS.matcher(email).matches()) return INVALID_EMAIL\n    if (password.length < 8) return INVALID_PASSWORD\n    if (type == REGISTER && passwordConfirmation != password) return MISMATCHED_PASSWORDS\n    return SUCCESS\n}\n\n@Composable\nprivate fun PasswordField(\n    text: String,\n    isError: Boolean,\n    showPassword: Boolean,\n    enabled: Boolean,\n    isConfirmation: Boolean = false,\n    onTextChanged: (String) -> Unit,\n    onShowPassword: (Boolean) -> Unit,\n) {\n    val label = if (isConfirmation) \"Confirm Password\" else \"Password\"\n    TextField(\n        modifier = Modifier.fillMaxWidth(),\n        label = { Text(text = label) },\n        placeholder = { Text(text = label) },\n        value = text,\n        onValueChange = onTextChanged,\n        visualTransformation = if (showPassword) VisualTransformation.None else PasswordVisualTransformation(),\n        trailingIcon = {\n            IconButton(\n                onClick = {\n                    onShowPassword(!showPassword)\n                }\n            ) {\n                Icon(\n                    imageVector = if (showPassword) Icons.Filled.Visibility else Icons.Filled.VisibilityOff,\n                    contentDescription = if (showPassword) \"Hide password\" else \"Show password\",\n                )\n            }\n        },\n        isError = isError,\n        enabled = enabled,\n        singleLine = true,\n        keyboardOptions = KeyboardOptions(imeAction = ImeAction.Next)\n    )\n}\n\n@Preview\n@Composable\nprivate fun AuthDialogPreview() {\n    ClickyTheme {\n        AuthDialog()\n    }\n}\n\n@Preview\n@Composable\nprivate fun AuthDialogLoadingPreview() {\n    ClickyTheme {\n        AuthDialog(loading = true)\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/ethanmichaelis/clicky/nav/AuthDialog.kt b/app/src/main/java/com/ethanmichaelis/clicky/nav/AuthDialog.kt
--- a/app/src/main/java/com/ethanmichaelis/clicky/nav/AuthDialog.kt	
+++ b/app/src/main/java/com/ethanmichaelis/clicky/nav/AuthDialog.kt	
@@ -172,7 +172,11 @@
         isError = isError,
         enabled = enabled,
         singleLine = true,
-        keyboardOptions = KeyboardOptions(imeAction = ImeAction.Next)
+        keyboardOptions = KeyboardOptions(
+            imeAction = ImeAction.Next,
+            keyboardType = KeyboardType.Email,
+            autoCorrect = false,
+        )
     )
 }
 
